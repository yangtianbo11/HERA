// ListHelpers.hera
//
// Things beyond the core ADT, e.g. "length", "list-display", etc.
//
// Follow same register conventions as List.hera: 1..3 parameters, 8..11 temporaries
// Indentation: function boundaries are left-justified; local control is half-indented
// 
// NOTE: code for the _functions_ goes here; data go in ListHelpers-data.hera
//


// One member of the team should add a bunch of #include's here,
//  like those in List.hera, so that each file can be committed
//  by a single team member, reducing potential for conflicts
//  (as long as everyone starts work with a "pull",
///  and then does a "push" at the end of the session).

#include "ListHelpers_length.hera"
#include "ListHelpers_DisplayCode.hera"


// Sam Silverman editor of this function
LABEL(LIST_CONTAINS)
    // parameters: R1 = list, R2 = value to be searched for
    // return: R1 = bool

    // preamble: store PC_ret, FP_alt, R4, and R5
      INC(SP, 4)
      STORE(PC_ret, 0,FP)
      STORE(FP_alt, 1,FP)
      STORE(R4, 2,FP)
      STORE(R5, 3,FP)


    MOVE(R4, R1)  // save R1 into R4
    LABEL(loop)
        // if the list is empty, exit the loop and return 0
          MOVE(R1, R4)
          MOVE(FP_alt, SP)
          CALL(FP_alt, LIST_EMPTY)
          FLAGS(R1)
          BNZ(returnFalse)

        // if the current element in the list is equal to R2, exit the loop and return 1
          MOVE(R1, R4)
          MOVE(FP_alt, SP)
          CALL(FP_alt, LIST_FIRST)
          CMP(R1, R2)  // R1 = list, R2 = i we want
          BZ(returnTrue)

        // otherwise, get the rest of the list and keep looping
          MOVE(R1, R4)
          MOVE(FP_alt, SP)
          CALL(FP_alt, LIST_REST)
          MOVE(R4, R1)
    BR(loop)

    // set the return value
      LABEL(returnFalse)
          SET(R1, 0)
          BR(output)
      LABEL(returnTrue)
          SET(R1, 1)
          BR(output)
      LABEL(output)

    // postamble: get back PC_ret, FP_alt, R4, and R5
      LOAD(R4, 2,FP)
      LOAD(R5, 3,FP)
      LOAD(PC_ret, 0,FP)
      LOAD(FP_alt, 1,FP)
      DEC(SP, 4)

RETURN(FP_alt, PC_ret)


//Tianbo Yang is the editor of this function
LABEL(LIST_INDEX)
// mimimum standard "preamble" for a function that calls other functions:
//   save PC_ret and FP_alt (as per Figure 7.9 of HERA docs v. 2.4.0)
// preamble: store PC_ret, FP_alt, R4, and R5
INC(SP, 4)
STORE(PC_ret, 0,FP)
STORE(FP_alt, 1,FP)
STORE(R4, 2,FP)
STORE(R5, 3,FP)

//body of index function:
MOVE(R4, R1)	// R4 will be "current" list
SET(R5, -1)   	// R5 will be the result, start at -1
LABEL(CHECK_IF_CONTAINS)
MOVE(R1, R4)	// pass current list, i.e., R4 as a parameter to "contains?"
MOVE(FP_alt, SP)    // standard call sequence, start with new frame above this one
CALL(FP_alt, LIST_CONTAINS)
FLAGS(R1)		// if result is true, i.e. nonzero, the "Z" flag will be off
//print_reg(R1)
BZ(LIST_INDEX_DONE)

INC(R5, 1)
//print_reg(R5)
MOVE(R1, R4)	// pass current list, i.e., R4 as a parameter to "rest"
MOVE(FP_alt, SP)    // standard call sequence, start with new frame above this one
CALL(FP_alt, LIST_REST)
MOVE(R4, R1)  	// copy the result of "rest" into R4, the current list
BR(CHECK_IF_CONTAINS)

LABEL(LIST_INDEX_DONE)
MOVE(R1, R5)	// copy the count from R5 into R1, establishing the return value

LOAD(R5, 3,FP)
LOAD(R4, 2,FP)
DEC(SP, 2)

// minimum standard "postamble" for a function that calls other functions:
//   restore PC_ret and FP_alt (as per Figure 7.9 of HERA docs v. 2.4.0)
LOAD(FP_alt, 1,FP)
LOAD(PC_ret, 0,FP)
DEC(SP, 2)
RETURN(FP_alt, PC_ret)